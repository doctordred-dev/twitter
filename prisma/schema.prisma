// Prisma schema for Twitter clone (minimal User, Post)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  passwordHash  String
  username      String   @unique
  displayName   String
  bio           String?  @db.Text
  avatarUrl     String?
  headerImageUrl String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  posts         Post[]
  sessions      Session[]
  emailTokens   EmailToken[]
  following     Follow[] @relation("follower")
  followers     Follow[] @relation("following")
  likes         Like[]
  conversationMembers ConversationMember[]
  messagesSent  Message[] @relation("messagesSent")
  notifications Notification[]
}

model Post {
  id        String   @id @default(uuid())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  text      String   @db.VarChar(280)
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  likes     Like[]

  @@index([authorId, createdAt])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  messages  Message[]
  members   ConversationMember[]
}

model ConversationMember {
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  senderId       String
  text           String
  createdAt      DateTime @default(now())
  readAt         DateTime?

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation("messagesSent", fields: [senderId], references: [id])

  @@index([conversationId, createdAt])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String
  payload   Json
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  tokenHash   String
  rememberMe  Boolean  @default(false)
  deviceInfo  String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  @@index([userId])
  @@index([expiresAt])
}

model EmailToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  type      String   // 'verify' or 'reset'
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}
